modbus:
  name: miampere
  type: tcp
  host: 192.168.1.234
  port: 502


input_text:
  silenciar_alertas_hasta: ## para que no de muchos avisos seguidos

sensor:
  - platform: statistics
    entity_id: sensor.temp_baterias
    name: Estadisticas temperatura baterias
    sampling_size: 1000
    max_age:
      hours: 24

  - platform: statistics
    entity_id: sensor.temp_inverter
    name: Estadisticas temperatura inverter
    sampling_size: 1000
    max_age:
      hours: 24

  - platform: statistics
    entity_id: sensor.temperatura_ampere
    name: Estadisticas temperatura armario ampere
    sampling_size: 1000
    max_age:
      hours: 24



  - platform: template
    sensors:

      carga_bateria_app:
        value_template: >
            {% set v =  (states('sensor.ampere_batterysoc') | float * 1.5 -25) | round(1) %}
            {% if v<100 %}
            {{ v }}
            {% else %}
            100
            {% endif %}
        unit_of_measurement: '%'


      # tuve que hacer un sensor template e igualarlo al de ampere, porque en el de ampere (modbus) no podía establecer el friendly_name
      temp_baterias:
        # value_template: "{{ states .sensor.ampere_temp_battcellmax.state|float }}"
        value_template: "{{ states('sensor.ampere_temp_battcellmax')|float }}"
        unit_of_measurement: "°C"
        friendly_name: ' '  # para que no aparezca en el picture-element

      temp_inverter:
        # value_template: "{{ states .sensor.ampere_temp_inverter.state|float }}"
        value_template: "{{ states('sensor.ampere_temp_inverter')|float }}"
        unit_of_measurement: "°C"
        friendly_name: ' '  

        # https://community.home-assistant.io/t/updating-a-template-sensor-value-every-24rs-using-automation-to-retrieve-a-switch-attribute-value/58585

      
      # Los valores originales no son recuperables para el històrico, no sé porqué
      miampere_demand:
        value_template:  '{{ states("sensor.ampere_demand") | float }}'
        unit_of_measurement: 'kW'
      miampere_externalpvpower:
        value_template: "{{ states('sensor.ampere_externalpvpower') | float }}"
        unit_of_measurement: 'kW'
      miampere_inverteractivepower:
        value_template: "{{ states('sensor.ampere_inverteractivepower') | float}}"
        unit_of_measurement: 'kW'

      miampere_inverterbatterypower:
        value_template:  "{{ states('sensor.ampere_inverterbatterypower') | float}}"
        unit_of_measurement: 'kW'
      miampere_inverterpvpower:
        value_template: "{{ states('sensor.ampere_inverterpvpower') | float}}"
        unit_of_measurement: 'kW'
      miampere_meteractivepower:
        value_template: "{{ states('sensor.ampere_meteractivepower') | float}}"
        unit_of_measurement: 'kW'


      #Estos son los sensores que obtienen los mismos valores que la APP del móvil
      miampere_solacasa:
        value_template: >
            {% set a3 = states('sensor.ampere_inverterpvpower') | float %}
            {% set a8 = states('sensor.ampere_demand') | float %}
            {% if (a8>=a3) %} {{ a3 }} {% else%} {{ a8 }} {% endif %}
        unit_of_measurement: 'kW'
      miampere_solaampere:
        value_template: >
            {% set a3 = states('sensor.ampere_inverterpvpower') | float %}
            {% set a8 = states('sensor.ampere_demand') | float %}
            {% if (a3>a8) %} {{ (a3-a8) | round (3) }} {% else %} 0 {% endif %}
        unit_of_measurement: 'kW'

      miampere_ampereared:
        value_template: >
            {% set a1 = states('sensor.ampere_meteractivepower') | float %} 
            {% if (a1<0) %} {{ -a1 }} {% else %} 0 {% endif %}
        unit_of_measurement: 'kW'

      miampere_redacasa:
        value_template: >
            {% set a1 = states('sensor.ampere_meteractivepower') | float %}
            {% set a8 = states('sensor.ampere_demand') | float %}
            {% set solacasa = states('sensor.miampere_solacasa') | float %}
            {% if (a1>0 and a8 > solacasa) %}{{ (a8-solacasa) | round (3) }} {% else %} 0 {% endif %}
        unit_of_measurement: 'kW'


      miampere_redaampere:
        value_template: >
          {% set a1 = states('sensor.ampere_meteractivepower') | float %} 
          {% set redacasa = states('sensor.miampere_redacasa') | float %} 
          {% set redaampere = (a1 - redacasa) | round (3) %} 
          {% if (redaampere < 0) %}{% set redaampere = 0 %} {% endif %}
          {{ redaampere }}
        unit_of_measurement: 'kW'

      miampere_ampereacasa:
        value_template: >
          {% set a8 = states('sensor.ampere_demand') | float %}
          {% set solacasa = states('sensor.miampere_solacasa') | float %} 
          {% set redacasa = states('sensor.miampere_redacasa') | float %} 
          {{ (a8-solacasa-redacasa) | round (3) }}
        unit_of_measurement: 'kW'





# --------------------------------------------------------------------------------------
# -------------------------------- SENSORES AMPERE  3.2 --------------------------------
# --------------------------------------------------------------------------------------

  - platform: modbus
    registers:
      - name: Ampere MeterActivePower
        hub: miampere
        unit_of_measurement: 'kW'
        register: 0
        count: 2
        data_type: int
        register_type: input
        scale: 0.001
        precision: 2
        
      - name: Ampere MeterReactivePower
        hub: miampere
        unit_of_measurement: 'VAr'
        register: 2
        count: 2
        data_type: int
        register_type: input
        scale: 1
        precision: 0

      - name: Ampere InverterActivePower
        hub: miampere
        unit_of_measurement: 'kW'
        register: 4
        count: 2
        data_type: int
        register_type: input
        scale: 0.001
        precision: 2        

      - name: Ampere InverterReactivePower
        hub: miampere
        unit_of_measurement: 'VAr'
        register: 6
        count: 2
        data_type: int
        register_type: input
        scale: 1
        precision: 0

      - name: Ampere InverterPVPower
        hub: miampere
        unit_of_measurement: 'kW'
        register: 8
        count: 2
        data_type: int
        register_type: input
        scale: 0.001
        precision: 2    

      - name: Ampere ExternalPVPower
        hub: miampere
        unit_of_measurement: 'kW'
        register: 10
        count: 2
        data_type: int
        register_type: input
        scale: 0.001
        precision: 2             

      - name: Ampere InverterBatteryPower
        hub: miampere
        unit_of_measurement: 'kW'
        register: 12
        count: 2
        data_type: int 
        register_type: input 
        scale: 0.001
        precision: 2        

      - name: Ampere BatterySOC
        hub: miampere
        unit_of_measurement: '%'
        register: 14
        count: 2
        data_type: int
        register_type: input 
        scale: 0.1
        precision: 1
        
      - name: Ampere BatterySOH
        hub: miampere
        unit_of_measurement: '%'
        register: 16
        count: 2
        data_type: int
        register_type: input 
        scale: 0.1
        precision: 1        

      - name: Ampere BatteryVoltage
        hub: miampere
        unit_of_measurement: 'V'
        register: 18
        count: 2
        data_type: int
        register_type: input 
        scale: 0.1
        precision: 1 

      - name: Ampere MeterGridVoltage
        hub: miampere
        unit_of_measurement: 'V'
        register: 20
        count: 2
        data_type: int
        register_type: input 
        scale: 0.1
        precision: 1 

      - name: Ampere MeterGridFrequency
        hub: miampere
        unit_of_measurement: 'Hz'
        register: 22
        count: 2
        data_type: int
        register_type: input 
        scale: 0.1
        precision: 1 

      - name: Ampere Temp BattCellMax  # BattCellMax/
        hub: miampere
        unit_of_measurement: '°C'
        register: 24
        count: 2
        data_type: int
        register_type: input 
        scale: 0.1
        precision: 1 

      - name: Ampere Temp BattCellMin  # BattCellMinT
        hub: miampere
        unit_of_measurement: '°C'
        register: 26
        count: 2
        data_type: int
        register_type: input 
        scale: 0.1
        precision: 1 

      - name: Ampere Temp Inverter  # InverterT
        hub: miampere
        unit_of_measurement: '°C'
        register: 28
        count: 2
        data_type: int
        register_type: input 
        scale: 0.1
        precision: 1                 

      - name: Ampere ChargeAvailable
        hub: miampere
        unit_of_measurement: 'kW'
        register: 30
        count: 2
        data_type: int
        register_type: input
        scale: 0.001
        precision: 2             

      - name: Ampere DischargeAvailable
        hub: miampere
        unit_of_measurement: 'kW'
        register: 32
        count: 2
        data_type: int 
        register_type: input 
        scale: 0.001
        precision: 2  

      - name: Ampere Status
        hub: miampere
        register: 34
        count: 2
        data_type: int
        register_type: input

      - name: Ampere Alarms
        hub: miampere
        register: 36
        count: 2
        data_type: int 
        register_type: input 

      - name: Ampere InverterPVVoltage
        hub: miampere
        unit_of_measurement: 'V'
        register: 38
        count: 2
        data_type: int
        register_type: input 
        scale: 0.1
        precision: 1 

      - name: Ampere WorkingMode
        hub: miampere
        register: 40
        count: 2
        data_type: int
        register_type: input 

      - name: Ampere Demand
        hub: miampere
        unit_of_measurement: 'kW'
        register: 42
        count: 2
        data_type: int
        register_type: input 
        scale: 0.001
        precision: 2                 


input_boolean: # ----------------------------------------------------------------------------------------------------------------------------

  # Pensado para google home. Al activarlo llama a la automatización informa_estado_bateria
  ejecuta_estado_ampere:
    name: Ejecuta estado batería
    initial: off  


automation:
# ------------------------------------------------------------------------------------------------------
# ------------------------------------- CONTROL TEMPERATURA AMPERE -------------------------------------
# ------------------------------------------------------------------------------------------------------

- id: temperatura_ampere
  alias: Alerta temperatura AMPERE
  trigger:
  - below: '15.0'
    entity_id: sensor.temperatura_ampere
    for: '5'
    platform: numeric_state
  - below: '10.0'
    entity_id: sensor.temperatura_ampere
    for: '5'
    platform: numeric_state
  - above: '30.0'
    entity_id: sensor.temperatura_ampere
    for: '5'
    platform: numeric_state
  - above: '35.0'
    entity_id: sensor.temperatura_ampere
    for: '5'
    platform: numeric_state
  - above: '40.0'
    entity_id: sensor.temperatura_ampere
    for: '5'
    platform: numeric_state
  - above: '45.0'
    entity_id: sensor.temperatura_ampere
    for: '5'
    platform: numeric_state    
  action:
  - data:
      message: 'Temperatura AMPER {{ states("sensor.temperatura_ampere") }} grados '
      target: 440192507
    service: telegram_bot.send_message


# Para google home assistant: "ACTIVAR ESTADO BATERÍAS"
- id: informa_estado_bateria
  alias: informa estado baterías
  trigger:
    platform: state
    entity_id: input_boolean.ejecuta_estado_ampere
    to: 'on'
  action:
    - service: script.estado_baterias
    - delay: 00:00:10
    - service: input_boolean.turn_off
      entity_id: input_boolean.ejecuta_estado_ampere

# ------------------------------------------------------------------------------------------------------      
# --------------------------------------------------- INTRUSIÓN AMPERE ---------------------------------
# ------------------------------------------------------------------------------------------------------

- id: ampere_abierto
  alias: Ampere abierto
  trigger:
    platform: state
    entity_id: binary_sensor.puerta_ampere
    from: 'off'
    to: 'on'
  action:
  - service: telegram_bot.send_message
    data:
      message: AMPERE ABIERTO!!!!
      target: 440192507

- id: ampere_cerrado
  alias: Ampere cerrado
  trigger:
    platform: state
    entity_id: binary_sensor.puerta_ampere
    from: 'on'
    to: 'off'
  action:
  - service: telegram_bot.send_message
    data:
      message: AMPERE CERRADO!!!!
      target: 440192507

# ------------------------------------------------------------------------------------------------------      
# ------------------------------------------ ALERTA CONSUMO ELÉCTRICO ----------------------------------
# ------------------------------------------------------------------------------------------------------

- id: alerta_consumo
  alias: Alerta consumo eléctrico alto
  trigger:
    - platform: numeric_state
      entity_id: sensor.ampere_demand
      above: 4.0
    - platform: numeric_state
      entity_id: sensor.ampere_demand
      above: 5.5
    - platform: numeric_state
      entity_id: sensor.ampere_demand
      above: 6.0

  condition:
    condition: or  # Solo si han pasado 5 minutos desde el aviso anterior, o el consumo es realmente alto
    conditions:
      - condition: template
        value_template: "{{ (as_timestamp(now()) | float) | timestamp_custom('%H:%M') > states('input_text.silenciar_alertas_hasta') }}"
      - condition: template
        value_template: "{{ states('sensor.ampere_demand') | float > 5.5 }}"

  action:
    - service: script.notificacion_google
      data_template:
        mensaje: >
          {% if (states ("sensor.ampere_demand") | float > 6.0 ) %}
            Consumo eléctrico MUY alto, {{ states ("sensor.ampere_demand") }} kilowatios. Recomendable apagar dispositivos
          {% elif (states ("sensor.ampere_demand") | float > 5.0 ) %}}
            Consumo eléctrico alto, {{ states ("sensor.ampere_demand") }} kilowatios.
          {% else %}
            Consumo eléctrico elevado, {{ states ("sensor.ampere_demand") }} kilowatios.
          {% endif %}
        volumen: >
          {% if (states ("sensor.ampere_demand") | float > 6.0 ) %}
            {% set vol = 0.9 %}
          {% elif (states ("sensor.ampere_demand") | float > 5.0 ) %}}
            {% set vol = 0.7 %}
          {% else %}
            {% set vol = 0.6 %}
          {% endif %}
          {{ vol }}
    - service: input_text.set_value # Desactivo la alarma durante 5 minutos
      data_template:
        entity_id: input_text.silenciar_alertas_hasta
        value: "{{ (as_timestamp(now()) + 300 | float) | timestamp_custom('%H:%M') }}"
       
script:
  estado_baterias:      
    alias: Estado baterías AMPERE
    sequence:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.superyo
        volume_level: 0.7
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.miniyo
        volume_level: 0.7
    - delay: 00:00:03  # para que no se una mensaje de google (de acuerdo, ejecuto...) y el de las baterías
    - service: tts.google_say
      entity_id:  "all" # media_player.superyo  
      data_template:
        message: >
            La carga de la batería es {{ states('sensor.carga_bateria_app') }} por ciento y se está generando {{  states('sensor.ampere_inverterpvpower')  }}. Se está consumiendo {{ states('sensor.miampere_demand') }}. La temperatura es de {{ states('sensor.temperatura_ampere') }} grados.
