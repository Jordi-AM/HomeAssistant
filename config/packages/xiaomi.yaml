
sensor: 

  - platform: template
    sensors:
      vacuum_start_time_weekdays:
        friendly_name: 'Hora de inicio de limpieza (días laborables)'
        value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.vacuum_start_hour_weekdays") | int, states("input_number.vacuum_start_minutes_weekdays") | int) }}'
      vacuum_start_time_weekend:
        friendly_name: 'Hora de inicio de limpieza (fin de semana)'
        value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.vacuum_start_hour_weekend") | int, states("input_number.vacuum_start_minutes_weekend") | int) }}'


      vacuum_weekdays:
        friendly_name: "Vacuum - Laborable"
        value_template: "Día laborable:"
      vacuum_weekend:
        friendly_name: "Vacuum - Fin de semana"
        value_template: "Fin de semana:"


input_number: 
  vacuum_start_minutes_weekend:
    name: Minuto inicio
    initial: 0
    min: 0
    max: 59
    step: 1
    mode: slider
  vacuum_start_hour_weekend:
    name: Hora inicio
    initial: 13
    min: 0
    max: 23
    step: 1
    mode: slider
  vacuum_start_minutes_weekdays:
    name: Minuto inicio
    initial: 0
    min: 0
    max: 59
    step: 1
    mode: slider
  vacuum_start_hour_weekdays:
    name: Hora inicio
    initial: 15
    min: 0
    max: 23
    step: 1
    mode: slider  

#--------------------------------------------------------------------------------------------------------------
#                                           A U T O M A T I O N S                                             -
#--------------------------------------------------------------------------------------------------------------
automation:
    # --------------------------------------------------------------- LIMPIEZA ENTRE SEMANA -------------------------------------------------
  - id: cleaning_timer_weekdays
    alias: Horario de limpieza entre semana
    trigger:
    - platform: template
      value_template: >
          {{ states.sensor.vacuum_start_time_weekdays.state == states.sensor.time.state }}
    condition:
    - condition: state
      entity_id: 'binary_sensor.workday_sensor' 
      state: 'on'
    - condition: state
      entity_id: automation.horario_de_limpieza_entre_semana # si la condición es falsa, se para el script
      state: 'on'
    action:
    - service: script.pasar_aspirino
      data:
        sensor: automation.horario_de_limpieza_entre_semana


    # --------------------------------------------------------------- LIMPIEZA FIN DE SEMANA -------------------------------------------------
  - id: cleaning_timer_weekend
    alias: Horario de limpieza para el fin de semana.
    trigger:
    - platform: template
      value_template: >
        {{ states.sensor.vacuum_start_time_weekend.state == states.sensor.time.state }}
    condition:
    - condition: state
      entity_id: 'binary_sensor.workday_sensor' 
      state: 'off'
    - condition: state
      entity_id: automation.horario_de_limpieza_para_el_fin_de_semana # si la condición es falsa, se para el script
      state: 'on'

    action:
    - service: script.pasar_aspirino
      data:
        sensor: automation.horario_de_limpieza_para_el_fin_de_semana

#--------------------------------------------------------------------------------------------------------------
#                                                 S C R I P T S                                               -
#--------------------------------------------------------------------------------------------------------------
script:

  # Avisa de que va a pasar aspirino y espera 2 minutos por si se quiere cancelar. Envía notificaciones a telegram
  pasar_aspirino:
    sequence:
      - service: script.notificacion_google
        data:
          mensaje: "2 minutos para empezar limpieza aspirino"
      - delay: '00:02:00'      # Damos tiempo por si queremos cancelar limpieza
      - condition: template    # Verificamos si se ha cancelado
        value_template: "{{ is_state(sensor,'on') }}"
      - service: vacuum.start
        data:
          entity_id: vacuum.aspirino
      - service: telegram_bot.send_message
        data:
          message: Pasando aspirino
          target: 440192507      
      - delay: '00:00:10'   # para que salga de estado docked
      - wait_template: "{{ is_state('vacuum.aspirino', 'docked') }}"  # Esperamos hasta que esté de vuelta
      - service: telegram_bot.send_message
        data:
          message: Limpieza finalizada
          target: 440192507

